Compiling modernised mFAST
==========================

Assumptions:
============
1) The abstraction layer (adapter) is called myNewLib. If a different name has been given, make the appropriate changes to the instructions below.

----------------------------------

Instructions
============
1) update CMakeLists.txt
	l35: change the following command
			- include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/tinyxml2)
			+ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src/myNewLib)


2) update src/mfast/xml_parser/CMakeLists.txt
	l9: change the following command
			- include_directories("${CMAKE_SOURCE_DIR}/tinyxml2")
		 	+ include_directories("${CMAKE_SOURCE_DIR}/myNewLib")

	l11: change the following command
			- set(mfast_xml_parser_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/../../tinyxml2/tinyxml2.cpp ${sources} ${headers})
			+ set(mfast_xml_parser_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/../../myNewLib/myNewLib.cpp ${sources} ${headers})


3) create src/myNewLib/CMakeLists.txt with the following content
			IF(BIICODE)
				ADD_BIICODE_TARGETS()
				if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/resources)
					file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/resources DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
			    ENDIF()
			    RETURN()
			ENDIF(BIICODE)
			cmake_minimum_required(VERSION 2.6 FATAL_ERROR)
			cmake_policy(VERSION 2.6)

			project(myNewLib)
			include(GNUInstallDirs)
			#enable_testing()

			#CMAKE_BUILD_TOOL

			################################
			# set lib version here

			set(GENERIC_LIB_VERSION "3.0.0")
			set(GENERIC_LIB_SOVERSION "3")


			################################
			# Add common source

			include_directories("${CMAKE_CURRENT_SOURCE_DIR}/.")

			################################
			# Add custom target to copy all data

			set(TARGET_DATA_COPY DATA_COPY)
			if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
				add_custom_target(
					${TARGET_DATA_COPY}
				 	COMMAND ${CMAKE_COMMAND} -E echo "In source build")
			else(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
				make_directory(${CMAKE_CURRENT_BINARY_DIR}/resources/)
				add_custom_target(
					${TARGET_DATA_COPY}
					COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/resources/dream.xml ${CMAKE_CURRENT_BINARY_DIR}/resources/
					COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/resources/empty.xml ${CMAKE_CURRENT_BINARY_DIR}/resources/
					COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/resources/utf8test.xml ${CMAKE_CURRENT_BINARY_DIR}/resources/
					COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/resources/utf8testverify.xml ${CMAKE_CURRENT_BINARY_DIR}/resources/)
			endif(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})

			################################
			# Add definitions

			if(MSVC)
				add_definitions(-D_CRT_SECURE_NO_WARNINGS)
			endif(MSVC)

			set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")

			################################
			# Add targets
			option(BUILD_SHARED_LIBS "build shared or static libraries" ON)
			add_library(myNewLib myNewLib.cpp myNewLib.h)
			set_target_properties(myNewLib PROPERTIES
			        COMPILE_DEFINITIONS "myNewLib_EXPORT"
				VERSION "${GENERIC_LIB_VERSION}"
				SOVERSION "${GENERIC_LIB_SOVERSION}")

			add_executable(xmltest xmltest.cpp)
			add_dependencies(xmltest myNewLib)
			add_dependencies(xmltest ${TARGET_DATA_COPY})
			target_link_libraries(xmltest myNewLib)


			install(TARGETS myNewLib
			        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
			        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
			        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

			install(FILES myNewLib.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

			foreach(p LIB INCLUDE)
				set(var CMAKE_INSTALL_${p}DIR)
				if(NOT IS_ABSOLUTE "${${var}}")
					set(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
				endif()
			endforeach()

			configure_file(myNewLib.pc.in myNewLib.pc @ONLY)
			install(FILES ${CMAKE_CURRENT_BINARY_DIR}/myNewLib.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

			#add_test(xmltest ${SAMPLE_NAME} COMMAND $<TARGET_FILE:${SAMPLE_NAME}>)
